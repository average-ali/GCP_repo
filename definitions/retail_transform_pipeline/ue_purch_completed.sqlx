// Create a view to store all generated transaction completed events
// Scaled for the last 90 days
config {
    type: "table",
    schema: 'movielens',
    name: "user_events_purchasecomplete",
    description: "Store event data for completed transactions",
    tags: ["disc_ai"],
    columns: {
        visitorId: "Unique id of each visitor",
        eventType: "Type of event",
        eventTime: "Time at which event occurred",
        productDetails: {
            description: "Nested object to store product details",
            columns: {
                product: {
                    columns: {
                        id: "id of product"
                    }
                },
                quantity: "number of products selected",
                priceInfo: {
                    columns: {
                        price: "price of product",
                        currencyCode: "currency"
                    }
                }
            }
        },
        purchaseTransaction: {
            description: "Nested object to store transaction details",
            columns: {
                id: "transaction ID",
                revenue: "revenue generated by transaction",
                tax: "Tax deducted from the revenue",
                cost: "cost",
                currencyCode: "Currency"
            }
        }
    }
}

WITH
  t AS (
  SELECT
    MIN(UNIX_SECONDS(time)) AS old_start,
    MAX(UNIX_SECONDS(time)) AS old_end,
    UNIX_SECONDS(TIMESTAMP_SUB( CURRENT_TIMESTAMP(), INTERVAL 90 DAY)) AS new_start,
    UNIX_SECONDS(CURRENT_TIMESTAMP()) AS new_end
  FROM
    `movielens.ratings`)
SELECT
  CAST(userId AS STRING) AS visitorId,
  "purchase-complete" AS eventType,
  FORMAT_TIMESTAMP( "%Y-%m-%dT%X%Ez", TIMESTAMP_SECONDS(CAST( (t.new_start + (UNIX_SECONDS(time) - t.old_start) * (t.new_end - t.new_start) / (t.old_end - t.old_start)) AS int64))) AS eventTime,
  [STRUCT(STRUCT(movieId AS id,
      STRUCT(1 AS price,
        "USD" AS currencyCode) AS priceInfo) AS product,
    1 AS quantity)] AS productDetails,
  STRUCT( movieId AS id,
    1 AS revenue,
    NULL AS tax,
    NULL AS cost,
    "USD" AS currencyCode ) AS purchaseTransaction
FROM
  `movielens.ratings`,
  t
WHERE
  rating >= 5
