-- Create a view to store all generated search events.
-- Scaled for the last 90 days using original time column
config {
    type: "table",
    schema: 'movielens',
    name: "user_events_search",
    description: "Store data for search events",
    tags: ["disc_ai"],
    columns: {
        visitorId: "Unique id of each visitor",
        eventType: "Type of event",
        eventTime: "Time at which event occurred",
        searchQuery: "Input use to generate the search result",
        productDetails: {
            description: "Nested object to store product details",
            columns: {
                product:{
                    columns: {id: "id of product"}
                        }
                    }},
        completionDetail: {
            description: "Details of the search result",
            columns: { 
                completionAttributionToken: "Unique identifier for search result", selectedSuggestion: "products included in result set", selectedPosition: "position"
            }
        }
    }
}
WITH t AS (
   SELECT
     MIN(UNIX_SECONDS(time)) AS old_start,
     MAX(UNIX_SECONDS(time)) AS old_end,
     UNIX_SECONDS(TIMESTAMP_SUB(
       CURRENT_TIMESTAMP(), INTERVAL 90 DAY)) AS new_start,
     UNIX_SECONDS(CURRENT_TIMESTAMP()) AS new_end
   FROM `movielens.ratings`)
 SELECT
   CAST(userId AS STRING) AS visitorId,
   "search" AS eventType,
   FORMAT_TIMESTAMP(
     "%Y-%m-%dT%X%Ez",
     TIMESTAMP_SECONDS(CAST(
       (t.new_start + (UNIX_SECONDS(time) - t.old_start) *
         (t.new_end - t.new_start) / (t.old_end - t.old_start))
     AS int64))) AS eventTime,
     regexp_extract(title, r'^[^()]*') as searchQuery,
   [STRUCT(STRUCT(r.movieId AS id) AS product)] AS productDetails,
   STRUCT(  GENERATE_UUID() AS completionAttributionToken, 
            CONCAT("https://www.imdb.com/title/tt",links.imdbId) AS selectedSuggestion, 
            0 as selectedPosition) AS completionDetail
 FROM `movielens.ratings` r, t
 LEFT JOIN `movielens.links` links 
 ON links.movieId = r.movieId
 LEFT JOIN `movielens.movies` movies
 ON movies.movieId = r.movieId
 WHERE rating >= 2

